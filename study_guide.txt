1. Reuse: Provide rationale on why we need to reuse requirements?
Answer: Reuse means taking advantage of work that's already been done earlier.
This helps us in improving the overall productivity, overall quality as well as greater consistency between the related systems.
There are 4 major reasons why we can reuse requirements:
 =1. Increase productivity:  Faster delivery, lower development costs, increased consistency both within and across systems and higher team productivity.
    Reusing trusted requirements can save review time ,accelerate the approval cycle and speed up other project activities such as testing.

 =2. Reuse can improve the ability to estimate implementation effort if data from implementing the same requirements on a previous project is available.

 =3. Increase quality: There will be fewer defects, reduced rework since reusable requirements have usually been well designed, implemented and tested.

 =4. From the user's perspective ,requirements reuse can improve functional consistency across related members of a product line or among a set of business applications.
 * Same look and feel across products.
 It removes the necessity to reinvent the wheel.

2. What are some of the requirements reuse barriers? Provide a brief description for each barrier.
Answer: Some of the requirements reuse barriers include
 =1.Missing or poor requirements: Requirements developed in the previous projects weren't fully developed.so it's impossible to reuse them.
 Requirements might be badly written, incomplete or outdated making them a poor fit for the present circumstances.

 =2. NIH "Not invented here"  : Some people are reluctant to reuse requirements from another organization.
 The requirements written elsewhere could be harder to understand.They might have followed a different terminology.
 The requirements might refer to documents that are unavailable or inaccessible in the current organization.
 =3. NAH "Not Applicable Here" Syndrome : Practitioners propose that a new process or approach does  not apply to their project or organization.
 The members might feel their project is unique and hence reusability isn't applicable in such a scenario.

 =4. Writing Style: The BAs might have produced terminologies and conventions that might not be standard. The requirements might have embedded design constraints that
 will offer little opportunity for reuse. If it's embedded, that requirement cannot be reused as it is.

 =5.Inconsistent organization: It can be difficult to reuse components since authors organise their requirements in many different ways.
 
 =6.Project Type: Requirements might be tightly coupled to specific implementation environments or platforms that are less likely to generate
 reusable requirements or to benefit from an existing pool of requirements knowledge.

 =7.Ownership: If we are developing a software product for a specific customer, its requirements are likely the proprietary intellectual property 
 of the customer thereby inhibiting the opportunity for reusability.


3.Explain why stability of vendor is an important factor to be considered when evaluating a tool for requirements management.
Answer: Couldn't find the answer on slides. Will update this answer later.

4.What are the core activities of requirement management? Provide a brief description for each activity.
Answer: Requirements management includes all activities that maintain the integrity,accuracy, and currency of requirements agreements throughout the project.
The core activities of requirement management are divided into 4 major categories
 =1. Version Control
 =2. Change Control
 =3. Requirements status tracking
 =4. Requirements tracing
 Version Control: Uniquely identifying different versions of an item- applies at the level of both individual requirements and requirements sets, most common presented in the form of documents.
 The version control should begin as soon as requirement or a document is drafted so a history of changes made can be retained.
 Every version of the requirements must be uniqued identified.
 Every team member should be able to access the current version of the requirements.
 Changes must be clearly documented and communicated to everyone affected.
 To minimise confusion, permit only designed individuals to update the requirements and make sure the version indentifier changes whenever an update is made.
 The most robust approach is to store the requirements in a requirements management tool since they track all the changes.

 Change Control: Subsequent changes to the document can be done only through the designated change control procedure.
 RM tools allows to check for the history of changes made to every requirement which is valuable when you need to revert to an earlier version.
 Such a tool allows for comments describing the rationale behind a decision to add ,modify or delete a requirement. These comments are helpful if the
 requirement becomes a topic for discussion again in the future.
 Each circulated version of the requirements document or each requirment in  a tool should include a revision history that identifies the changes made, the date of each change,the individual who made the change and the reason for each change.
 Each requiremnt has attributes with properties that distinguish it from other requirements.
 Once all the modifications are done, A Change request is raised and upon updation, the version number changes as well.

 Requirement Status Tracking: The different types of requirement statuses are defined.
 The status for every requirement is then recorded.
 =here's a tracking in place for every requirement based on the status.

 Requirement Tracing: the links to different existing requirements are set in place and if there are links to requirements with external systems, They're defined in this phase as well.

5.Most developers have encountered an apparently simple change that turned out to be far more complicated than expected. Explain why this is so. If you were a BA, how you would manage a requirements change?
Answer:Developers sometimes don’t—or can’t—produce realistic estimates of the cost and other ramifications of a proposed software change.
Additionally, when developers who want to be accommodating agree to add enhancements that users request, requirements changes slip in through the
back door instead of being approved by the right stakeholders.
Such uncontrolled change is a common source of project chaos, schedule slips, quality problems, and hard feelings.
If I was a BA, I would handle these changes in the following ways
* Proposed requirements changes are thoughtfully evaluated before being committed to
* Appropriate individuals make informed business decisions about requested changes
* Change activity is made visible to affected stakeholders
* Approved changes are communicated to all affected participants
* The project incorporates requirements changes in a consistent and effective fashion

6.What are some potential benefits of implementing requirements tracing?
Answer:Requirements trace information documents the dependencies and logical links between individual requirements and other system elements.
It helps us facilitate impact analysis by helping us identify all the work products that we might have to modify to implement a proposed requirement changes.
The benefits of implementing requirements tracing are:
 =1. Find the missing requirements : Look for business requirements that don't trace to any user requirements and user requirements that don't trace to any functional requirements.
 =2. Finding unnecessary requirements: Look for any functional requirements that don't trace back to user or business requirements and therefore might not be needed.
 =3. Certification and Compliance: You can use trace information when certifying a safety critical product, to demonstrate that all requirements were implemented.
 although it doesn't confirm it was implemented correctly.
 =4. Change impact analysis: Without trace information, there's a good chance that we'll overlook a system element that would be affected if we add, delete or modify a particular requirement.
 =5. Maintenance: Reliable trace information facilitates your ability to make changes correctly and completely during maintenance.
 When corporate policies or government regulations change, software systems often must be updated.
 A table that shows each  applicable business rule was addressed in the functional requirements,design and code makes it easier to make the necessary changes properly.
 =6. Project Tracking: if you record trace data during development, you'll have an accurate record of the implementation status of planned functionality.
 Absent links indicate work products that have not yet been created.
 =7.Reengineering: You can list the functions in an existing system you're replacing and trace them to where they are addressed in the new system's requirements and software components.
 =8. Reuse: Trace information facilitates the reuse of product components by identifying packages of related requirements ,designs, code and tests.
 =9. Testing: When a test fails,the links between tests, requirements and code point developers toward likely areas to examine for the defect.

 7.Is requirement tracing necessary?
 Answer: Similar to ans 6 (subject to change)

 8.Why are standards important?
 Answer: Standards are important for the following reason:
 =1.Cost and Time savings : Standardization simplifies development and testing processes which leads to savings in both time and money.
 =2.Certification/Compliance Schemes: Customers may require compliance:
      Federal/State Law - Government stipulates that any software used by the government must adhere to certain standards for reasons of public safety.
      For example: DoD
 =3.Enhance health, safety and quality of life
 =4. Professional qualifications: If a company is required to follow standards, having some standards knowledge is an advantage while applying for a job.
 =5. Guidance/Best Practises:Standards will help guide down the right path , ask the right questions otherwise missed.
 =6.Reuse: if following standards,requirements,design artifacts and engineering process etc can be reused.
 =7. Communication: Standards emphasise communication and make it easy to collaborate within teams in a large organization. It makes the communication much more consistent
 Standards emphasis communication and shared understanding.
 =8.Contracts: Standard adherence may be a contractual obligation when software companies bid on contracts. For example, In Aerospace and Military.